izlude,88,128,6	script	Celestia	-1,{	
	set .npcName$, "^1873f7[ Celestia ]^000000";
	callsub OnClick;
	end;
	
	OnInit:
		initnpctimer;
		callfunc("customizeNPCSprite", 4_EP19_FRIEDERIKE, 0, 0, 0, 0, 0, 0, 0, 85, 39, 0);
		end;

	OnTimer1000:
		showscript("Job Costumes");
		setnpctimer 0;
		end;
	
	//Change appearance of char upon login without changing the appearance in the login screen
	//Changing the appearance in the login screen is buggy and inaccurate
	OnPCLoginEvent:
		if(baselook) changebase baselook; //Job ID
		else if(novice_costume) { //Special condition to save Novice Costume
			changebase 0;
			if(!checkcart()) return;
			setcart 12;
			atcommand "@refresh";
		}
		end;

	OnClick:
		set .@exit_scenario, 0;
		cutin "celestia", 2;
		mes .npcName$;
		mes "Hello Adventurer!";
		mes "";
		mes "I have magical Job Costumes here,";
		mes "they can change you into something amazing and new.";
		next;
		mes .npcName$;
		mes "However, you must first be level: ";
		mes "99/70 - ^ff0000Transcendent^000000 / ^002affNinja^000000 / ^d07000Gunslinger^000000";
		mes "99/50 - ^05c400Soul Linker^000000 / ^ef7000Star Gladiator / Taekwon^000000";
		mes "99/99 - ^adaa01Super Novice^000000";
		next;
		switch(select("Okay, proceed:I'll be right back")){
			case 1:
				if (!callfunc("check_lvl_req")) callfunc("exit_speech_celestia", .npcName$, 0);
				break;
			case 2:
				callfunc("exit_speech_celestia", .npcName$, 1);
				break;
		}
		mes .npcName$;
		mes "Which of these Job Costumes fancy to your liking?";
		next;

		//Prepare costume choices dialogue
		//Split values to array using explode, then convert the values to int.
		explode(.@jobcostume_details_str$, callfunc("prepare_jobcostume_choices"), ",");
		for (.@i = 0; .@i < getarraysize(.@jobcostume_details_str$); .@i++) 
			set .@jobcostume_details[.@i], atoi(.@jobcostume_details_str$[.@i]);

		//Prepare character for Costume Change
		//Job Costume Details: 0 = selected job id / 1 = reset costume / 2 = second base job id / 3 = bodystyle
		callfunc("reset_char_state", .@jobcostume_details[2]); // Remove mounts, skills, char variables
		callfunc("change_jobcostume", .@jobcostume_details[0], .@jobcostume_details[1], .@jobcostume_details[3]);
		callfunc("set_jobcostume_flags", .@jobcostume_details[0], .@jobcostume_details[3]); //char variables for mount

		//End
		callfunc("exit_speech_celestia", .npcName$, 2);
}

function	script	exit_speech_celestia	{
	set .@npc_name$, getarg(0); set .@exit_scenario, getarg(1);

	mes .@npc_name$;
	switch (.@exit_scenario) {
        case 0: // Level req failed
            mes "Ah, it seems that you haven't reached the required level yet~";
            mes "Stop by again once ready. ^_^";
            break;
        case 1: // Come back again later
            mes "May the stars guide your path, dear adventurer.";
            mes "I look forward to see you again soon. ^_^";
            break;
        case 2: // Change costume success
            mes "Here you go!";
            mes "Remember, it's not just the clothes, but also your heart that makes you great.";
            mes "Have fun and have a nice day~";
            break;
    }
	close3;
}

function	script	check_lvl_req	{
	setarray .@GROUP_99_50[0], roclass(EAJ_TAEKWON), roclass(EAJ_STAR_GLADIATOR), roclass(EAJ_SOUL_LINKER);
	set .@CURRENT_JOB, roclass(eaclass());

	if(BaseLevel < 99) return 0;
	if(.@CURRENT_JOB == roclass(EAJ_SUPER_NOVICE) && JobLevel < 99) return 0; 
	else if(countinarray(.@GROUP_99_50, .@CURRENT_JOB) && JobLevel < 50) return 0;
	else if(!countinarray(.@GROUP_99_50, .@CURRENT_JOB) && JobLevel < 70) return 0; //All other remaining jobs

	return 1; //return true if it meets the level requirements
}

//This function will get the details needed for costume change
function	script	prepare_jobcostume_choices	{
	//Initialize Job Class values based from ea_job_system.txt
	set @eac, eaclass();
	set @SPECIAL_EAJ, (!(@eac&EAJL_2) ? EAJL_2_1 : EAJL_UPPER); //Star Glad costume for Taekwon / Ninja/GS 3rd job / 2nd trans
	set @BASE_EXPAND_3RD_EAJ, (roclass((@eac|EAJL_UPPER|EAJL_THIRD)) != -1 ? EAJL_UPPER|EAJL_THIRD : //Default Trans 3rd job
								roclass((@eac&EAJ_UPPERMASK|EAJL_2_1|EAJL_THIRD)) != -1 ? EAJL_2_1|EAJL_THIRD : //Taekwon, Suno
								roclass((@eac&EAJ_UPPERMASK|EAJL_2_1)) != -1 ? EAJL_2_1 : //Ninja/GS 3rd job
								EAJL_THIRD); //Star Glad, Soul Linker
	set @BASE_EXPAND_4TH_EAJ, (roclass(@eac|EAJL_2_1) != -1 ? EAJL_2_1|EAJL_UPPER : EAJL_UPPER); //Check whether 3rd job is from extended or 2nd trans

	//Costume Variables - Assumming player is Trans / Expanded
	set .@ORIGINAL_JOB, roclass(@eac); //Original Job of the player
	set .@SECOND_BASE, roclass(@eac&EAJ_UPPERMASK); //All 2nd base jobs + Expanded jobs + Star Glad (for Taekwon Base)
	set .@SECOND_TRANS, roclass(@eac&EAJ_UPPERMASK|@SPECIAL_EAJ); //All Trans + 3rd jobs of Expanded jobs
	set .@THIRD_JOBS, roclass(@eac&EAJ_UPPERMASK|@BASE_EXPAND_3RD_EAJ); //All 3rd jobs + Expanded jobs
	set .@FOURTH_JOBS, roclass(@eac&EAJ_UPPERMASK|@BASE_EXPAND_4TH_EAJ|EAJL_THIRD|EAJL_FOURTH); //All 4th jobs + Expanded jobs
	set .@NOVICE_JOB, roclass(EAJ_NOVICE); // For base Novice costume

	//Array of Job classes for conditional statements
	setarray .@CLASSES_WITH_V3[0], roclass(EAJ_WIZARD), roclass(EAJ_PRIEST);
	setarray .@EXPANDED_CLASSES[0], roclass(EAJ_NINJA), roclass(EAJ_GUNSLINGER), roclass(EAJ_SOUL_LINKER), roclass(EAJ_STAR_GLADIATOR);

	// Define all the list of possible choices in an array (0-8) (0-5)
	// Start with [1] to align with switch-case numbering
    setarray .@JOB_CHOICES$[0], "^0317fe[ Original ]^000000 - " + jobname(.@ORIGINAL_JOB),
								jobname(.@SECOND_BASE),
								jobname(.@THIRD_JOBS),
								jobname(.@THIRD_JOBS) + " Alternate (jRO)",
								jobname(.@THIRD_JOBS) + " v3",
								jobname(.@FOURTH_JOBS),
								jobname(.@THIRD_JOBS) + " Legacy",
								jobname(.@SECOND_TRANS),
								jobname(.@NOVICE_JOB);
	setarray .@JOB_CHOICES_ID[0], .@ORIGINAL_JOB, .@SECOND_BASE, .@THIRD_JOBS, .@FOURTH_JOBS, .@SECOND_TRANS,.@NOVICE_JOB;
	
	//Set defaults
	set .@job_id, .@ORIGINAL_JOB; set .@reset_costume, 0; set .@bodystyle, 0;

	if (countinarray(.@CLASSES_WITH_V3, .@SECOND_BASE)){
		setarray .@show_job_choices[0],		0, 1, 2, 3, 4, 5;
		setarray .@jobcostume_actions[0],	0, 1, 2, 2, 1, 3;

	} else if (countinarray(.@EXPANDED_CLASSES, .@SECOND_BASE)){
		setarray .@show_job_choices[0], 	0, 2, 5;
		setarray .@jobcostume_actions[0],	0, 2, 3;

	} else if (.@SECOND_BASE == roclass(EAJ_TAEKWON)){
		setarray .@show_job_choices[0], 	0, 7, 2, 5;
		setarray .@jobcostume_actions[0],	0, 4, 2, 3;

	} else if (.@SECOND_BASE == roclass(EAJ_SUPER_NOVICE)){
		setarray .@show_job_choices[0], 	0, 8, 5;
		setarray .@jobcostume_actions[0],	0, 5, 3;

	} else if (.@SECOND_BASE == roclass(EAJ_KNIGHT)){
		setarray .@show_job_choices[0], 	0, 1, 2, 6, 3, 5;
		setarray .@jobcostume_actions[0],	0, 1, 2, 2, 1, 3;
		
	} else { // Regular Trans Jobs
		setarray .@show_job_choices[0], 	0, 1, 2, 3, 5;
		setarray .@jobcostume_actions[0],	0, 1, 2, 2, 3;
	}

	// Generate the menu options and actions dynamically
    for (.@i = 0; .@i < getarraysize(.@show_job_choices); .@i++)
		setarray .@jobcostume_menu_options$[.@i], .@JOB_CHOICES$[.@show_job_choices[.@i]];

	for (.@i = 0; .@i < getarraysize(.@jobcostume_actions); .@i++)
		setarray .@jobcostume_menu_actions[.@i], .@JOB_CHOICES_ID[.@jobcostume_actions[.@i]];

	// Prepare assignment of jobcostume_details
	// Actions will be based on .@jobcostume_menu_actions rather than the index from select().
	set .@jobcostume_menu$, implode(.@jobcostume_menu_options$, ":");
	set .@job_choice, select(.@jobcostume_menu$)-1;

	switch (.@show_job_choices[.@job_choice]) {
		case 0: //Proceed, will use default values
			set .@reset_costume, 1;
			break;
		case 3:
		case 4:
		case 6:
			set .@bodystyle, 1;
			break;
    }
	set .@job_id, .@jobcostume_menu_actions[.@job_choice];

	//return can't pass a whole array, so combine it into 1 string
	setarray .@jobcostume_details$[0], .@job_id, .@reset_costume, .@SECOND_BASE, .@bodystyle;
	return implode(.@jobcostume_details$, ",");
}

//Set certain job conditions, usually for obtaining mounts for RK and Mechanic or retaining Novice job costume
function	script	set_jobcostume_flags	{
	set .@selected_job_id, getarg(0); set .@bodystyle, getarg(1);
	setarray .@mado_compatible[0], roclass(EAJ_MECHANIC_T), roclass(EAJ_MEISTER);
	setarray .@dragon_compatible[0], roclass(EAJ_RUNE_KNIGHT_T), roclass(EAJ_DRAGON_KNIGHT);

	if(countinarray(.@mado_compatible, .@selected_job_id)) set mado_compatible, 1; 
	else if(countinarray(.@dragon_compatible, .@selected_job_id) && .@bodystyle != 1) set rk_version, 1;
	else if(countinarray(.@dragon_compatible, .@selected_job_id)) set rk_version, 2;
	else if(.@selected_job_id == roclass(EAJ_KNIGHT) && .@bodystyle == 1) set rk_version, 3;
	else if(.@selected_job_id == roclass(EAJ_NOVICE)) set novice_costume, 1;

	return;
}

function	script	change_jobcostume	{
	set .@job_id, getarg(0); set .@costume_id, getarg(1); set .@bodystyle, getarg(2);

	if (.@bodystyle) setlook LOOK_BODY2, .@bodystyle; //For alternate (jRO) and v3
	set .@costume_id, (.@costume_id ? 0 : .@job_id); //Reset costume if costume_id has value
	set baselook, .@costume_id; changebase .@job_id; //Save costume ID to DB, then transform
	return;
}

//Remove mounts, some skills, bodystyle, and clothes color upon changing job costumes
function	script	reset_char_state	{
	setlook LOOK_BODY2, 0; setlook LOOK_CLOTHES_COLOR, 0;
	if(ismounting()) setmounting; //Remove Halter Lead from all class

	switch(getarg(0)){ // SECOND_BASE Job
		case 7: //Knight Job ID
			if(checkriding()) setriding 0;
			if(checkdragon()) setdragon 0;
			if(getskilllv("RK_DRAGONTRAINING")) skill "RK_DRAGONTRAINING", 0, SKILL_PERM_GRANT;
			set rk_version, 0;
			return;

		case 10: //Blacksmith
			if(getskilllv("NC_MADOLICENCE")) skill "NC_MADOLICENCE", 0, SKILL_PERM_GRANT;
			set mado_compatible, 0;
			return;

		case 11: //Hunter
			if(checkfalcon()) setfalcon 0;
			if(checkwug()) {
				setoption Option_Wugrider, 0;
				setoption Option_Wug, 0;
			}
			if(getskilllv("RA_WUGMASTERY")) skill "RA_WUGMASTERY", 0, SKILL_PERM_GRANT;
			if(getskilllv("RA_WUGRIDER")) skill "RA_WUGRIDER", 0, SKILL_PERM_GRANT;
			return;

		case 23: //Super novice
			set novice_costume, 0;
			return;
	}
	return;
}